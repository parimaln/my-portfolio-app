{"version":3,"sources":["components/Intro/Intro.tsx","components/UserCard/UserCard.lazy.tsx","components/OfficialProject/OfficialProject.tsx","components/ProjectListWrapper/ProjectListWrapper.tsx","components/UdacityProject/UdacityProject.tsx","components/UdacityProjectWrapper/UdacityProjectWrapper.tsx","components/sidebar/SideBar.tsx","App.tsx","reportWebVitals.ts","serviceWorker.ts","index.tsx"],"names":["Intro","Feature","props","boxSize","mt","mr","color","useColorModeValue","viewBox","fill","fillRule","d","clipRule","p","fontSize","bg","w","justifyContent","alignItems","shadow","px","py","mx","columns","base","lg","spacingY","spacingX","h2","mb","md","fontWeight","textAlign","sm","lineHeight","letterSpacing","direction","flexGrow","spacing","LazyUserCard","lazy","UserCard","fallback","OfficialProject","textColor","rounded","maxW","span","duration","_hover","textDecor","role","company","description","map","desc","ProjectListWrapper","useQuery","query","result","data","fetching","React","useState","projects","setProjects","useEffect","flexDirection","project","id","UdacityProject","projectType","curriculum","learning","href","projectUrl","isExternal","projectTitle","ExternalLink","SIDEBAR_ITEMS","UdacityProjectWrapper","udacityProjects","NavItem","icon","children","rest","colorSelected","colorNormal","align","pl","cursor","selected","transition","SidebarContent","as","pos","top","left","zIndex","h","pb","overflowX","overflowY","borderColor","borderRightWidth","aria-label","isSelected","Home","SelectedNav","onClick","setSelectedNav","MdHome","AboutMe","HiCollection","file","OfficialProjects","PM","FaMandalorian","PersonalProjects","currentIndex","selectedIndex","Sidebar","sidebar","useDisclosure","integrations","useColorMode","colorMode","toggleColorMode","setFile","asset","url","minH","display","isOpen","onClose","placement","borderRight","ml","justify","borderBottomWidth","onOpen","size","FaSun","FaMoon","h1","client","createClient","process","fetchOptions","token","headers","authorization","theme","extendTheme","colors","brand","50","100","200","300","400","500","600","700","800","900","config","initialColorMode","useSystemColorMode","App","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.428dfeda.chunk.js","sourcesContent":["import { Flex, useColorModeValue, Box, chakra, Link, Image, Button, Icon, SimpleGrid, VStack } from '@chakra-ui/react';\nimport React from 'react';\nimport { useQuery } from 'urql';\n\nconst Intro = () => {\n  //   const ImageQuery = `\n  //   query {\n  //     asset(where: {id: \"cksd16wa0lbe00c57ekb84oln\"}) {\n  //       url\n  //     }\n  //   }\n  // `;\n  // const [result] = useQuery({\n  //   query: ImageQuery,\n  // });\n\n  // const { data } = result;\n  const Feature = (props: { children: string }) => {\n    return (\n      <Flex>\n        <Icon\n          boxSize={5}\n          mt={1}\n          mr={2}\n          color={useColorModeValue(\"brand.500\", \"brand.300\")}\n          viewBox=\"0 0 20 20\"\n          fill=\"currentColor\"\n        >\n          <path\n            fillRule=\"evenodd\"\n            d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"\n            clipRule=\"evenodd\"\n          ></path>\n        </Icon>\n        <chakra.p\n          fontSize=\"lg\"\n          color={useColorModeValue(\"gray.700\", \"gray.400\")}\n          {...props}\n        />\n      </Flex>\n    );\n  };\n\n  return (\n    <Flex\n      bg={useColorModeValue(\"#F9FAFB\", \"gray.600\")}\n      p={20}\n      w=\"auto\"\n      justifyContent=\"center\"\n      alignItems=\"center\"\n    >\n      <Box\n        shadow=\"xl\"\n        bg={useColorModeValue(\"white\", \"gray.800\")}\n        px={8}\n        py={20}\n        mx=\"auto\"\n      >\n        <SimpleGrid\n          alignItems=\"center\"\n          columns={{ base: 1, lg: 2 }}\n          spacingY={{ base: 10, lg: 32 }}\n          spacingX={{ base: 10, lg: 24 }}\n        >\n          <Box>\n            <chakra.h2\n              mb={3}\n              fontSize={{ base: \"3xl\", md: \"4xl\" }}\n              fontWeight=\"extrabold\"\n              textAlign={{ base: \"center\", sm: \"left\" }}\n              color={useColorModeValue(\"black\", \"white\")}\n              lineHeight=\"shorter\"\n              letterSpacing=\"tight\"\n            >\n              About Me\n            </chakra.h2>\n            <chakra.p\n              mb={6}\n              fontSize={{ base: \"lg\", md: \"xl\" }}\n              textAlign={{ base: \"center\", sm: \"left\" }}\n              color={useColorModeValue(\"gray.600\", \"gray.500\")}\n            >\n              Hello, thanks for landing here and taking your time to read about me 😊\n            </chakra.p>\n            <chakra.p\n              mb={6}\n              fontSize={{ base: \"lg\", md: \"lg\" }}\n              textAlign={{ base: \"center\", sm: \"left\" }}\n              color={useColorModeValue(\"gray.600\", \"gray.500\")}\n            >\n              I am a full-stack engineer, having worked on various front-end technologies, mobile apps, web applications, and leading the teams.\n            </chakra.p>\n            <chakra.p\n              mb={6}\n              fontSize={{ base: \"lg\", md: \"lg\" }}\n              textAlign={{ base: \"center\", sm: \"left\" }}\n              color={useColorModeValue(\"gray.600\", \"gray.500\")}\n            >\n              In the last 4-5 years I have worked on and led 5 to 6 large-scale enterprise web applications with very high customer satisfaction.\n            </chakra.p>\n            <chakra.p\n              mb={6}\n              fontSize={{ base: \"lg\", md: \"lg\" }}\n              textAlign={{ base: \"center\", sm: \"left\" }}\n              color={useColorModeValue(\"gray.600\", \"gray.500\")}\n            >\n              Over the course of around 11 years, I have developed, deployed, and maintained multiple projects from scratch.\n            </chakra.p>\n            <chakra.p\n              mb={6}\n              fontSize={{ base: \"lg\", md: \"lg\" }}\n              textAlign={{ base: \"center\", sm: \"left\" }}\n              color={useColorModeValue(\"gray.600\", \"gray.500\")}\n            >\n              And this rich experience gives me the ability to help you in the following activities:\n            </chakra.p>\n            <VStack\n            direction=\"column\"\n            flexGrow={1}\n            spacing={5}\n            alignItems=\"start\"\n          >\n            <chakra.h2\n              mb={3}\n              fontSize={{ base: \"lg\", md: \"xl\" }}\n              fontWeight=\"extrabold\"\n              textAlign={{ base: \"center\", sm: \"left\" }}\n              color={useColorModeValue(\"black\", \"white\")}\n              lineHeight=\"shorter\"\n              letterSpacing=\"tight\"\n            >\n              General Experience\n            </chakra.h2>\n            <Feature>Research & Development</Feature>\n            <Feature>Consulting, Solutioning, Pre-sales and estimating tasks</Feature>\n            <Feature>Architecture validation, especially UI/UX technical validation</Feature>\n            <Feature>Learning/Researching a new technical topic for the project quickly and mentoring the team</Feature>\n            <Feature>Mentoring, Enabling and Leading the team, in the mentioned order</Feature>\n            <Feature>Architectural reviews, planning and execution processes</Feature>\n            <Feature>Work prioritization</Feature>\n            <Feature>Interacting with stakeholders such as Client, PM, SME, Architects and Leadership to communicate clear goals and tasks for the dev team</Feature>\n            <Feature>Agile and Scrum methodologies</Feature>\n            <Feature>Coding and engineering best practice usage in all projects</Feature>\n            <Feature>Engineering Management and Product Management</Feature>\n          </VStack>\n          </Box>\n          <VStack\n            direction=\"column\"\n            flexGrow={1}\n            spacing={5}\n            alignItems=\"start\"\n          >\n            <chakra.h2\n              mb={3}\n              fontSize={{ base: \"lg\", md: \"xl\" }}\n              fontWeight=\"extrabold\"\n              textAlign={{ base: \"center\", sm: \"left\" }}\n              color={useColorModeValue(\"black\", \"white\")}\n              lineHeight=\"shorter\"\n              letterSpacing=\"tight\"\n            >\n              Technical Skills\n            </chakra.h2>\n            <Feature>Experience in working with different UI frameworks ReactJS with hooks, Angular</Feature>\n            <Feature>Typescript, JavaScript, Java</Feature>\n            <Feature>Experience in styled-components, story-book, Reactive Programming - RxJS, Webpack</Feature>\n            <Feature>Unit, integration, and e2e testing using Jest, cypress</Feature>\n            <Feature>State Management Libraries (NgRx, Redux)</Feature>\n            <Feature>NodeJS, NestJS, GraphQL/REST, PostgreSQL, MongoDB</Feature>\n            <Feature>Cloud Integration/APIfication. Firebase, Azure, AWS Amplify backend, and frontend integration to develop full-stack apps.</Feature>\n            <Feature>Experience in setting CI/CD on Azure DevOps, CircleCI, Github Actions, Docker, git, Github, bitbucket</Feature>\n            <Feature>Writing maintainable code with design principles and patterns</Feature>\n            <Feature>Developing native Android and hybrid applications</Feature>\n            <Feature>Experience in working with macOS and iOS development environment</Feature>\n            <Feature>Reach 90,000 customers via our integration page</Feature>\n          </VStack>\n        </SimpleGrid>\n      </Box>\n    </Flex>\n  );\n}\n\nexport default Intro;\n","import React, { lazy, Suspense } from 'react';\n\nconst LazyUserCard = lazy(() => import('./UserCard'));\n\nconst UserCard = (props: JSX.IntrinsicAttributes & { children?: React.ReactNode; }) => (\n  <Suspense fallback={null}>\n    <LazyUserCard {...props} />\n  </Suspense>\n);\n\nexport default UserCard;\n","import React from \"react\";\nimport {\n  chakra,\n  Box,\n  Image,\n  Flex,\n  useColorModeValue,\n  Link\n} from \"@chakra-ui/react\";\nexport interface ProjectInfo {\n  id: string;\n  role: string;\n  description: string[];\n  duration: string;\n  company: string\n}\nexport default function OfficialProject(props: ProjectInfo) {\n  const textColor = useColorModeValue(\"gray.600\", \"gray.300\");\n  return (\n    <Flex\n      bg={useColorModeValue(\"#F9FAFB\", \"gray.600\")}\n      p={5}\n      w=\"full\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n    >\n      <Box\n        mx=\"auto\"\n        px={8}\n        py={4}\n        rounded=\"lg\"\n        shadow=\"lg\"\n        bg={useColorModeValue(\"white\", \"gray.800\")}\n        maxW=\"2xl\"\n      >\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\n          <chakra.span\n            fontSize=\"sm\"\n            color={useColorModeValue(\"gray.600\", \"gray.400\")}\n          >\n            {props.duration}\n          </chakra.span>\n        </Flex>\n\n        <Box mt={2}>\n          <chakra.h2\n            fontSize=\"2xl\"\n            color={useColorModeValue(\"gray.700\", \"white\")}\n            fontWeight=\"700\"\n            _hover={{\n              color: useColorModeValue(\"gray.600\", \"gray.200\"),\n              textDecor: \"underline\"\n            }}\n          >\n            {props.role}\n          </chakra.h2>\n          <chakra.h2\n            fontSize=\"xl\"\n            color={useColorModeValue(\"gray.700\", \"white\")}\n            fontWeight=\"700\"\n            _hover={{\n              color: useColorModeValue(\"gray.600\", \"gray.200\"),\n              textDecor: \"underline\"\n            }}\n          >\n            {props.company}\n          </chakra.h2>\n          {props.description && props.description.map(desc => \n            <chakra.p mt={2} color={textColor}>\n            {desc}\n          </chakra.p>\n            )}\n        </Box>\n      </Box>\n    </Flex>\n  );\n}\n","import { Flex, useColorModeValue, Box, SimpleGrid } from '@chakra-ui/react';\nimport OfficialProject, { ProjectInfo } from 'components/OfficialProject/OfficialProject';\nimport React from 'react';\nimport { useQuery } from 'urql';\n\n\nconst ProjectListWrapper = () => {\n  const ProjectQuery = `\n  query ProjectQuery {\n    projects(orderBy: sequence_ASC) {\n      role\n      company\n      description\n      duration\n    }\n  }\n  `;\n  const [result] = useQuery({\n    query: ProjectQuery,\n  });\n\n  const { data, fetching } = result;\n  const [projects, setProjects] = React.useState<ProjectInfo[]>([])\n  React.useEffect(() => {\n    if (!fetching && data && data.projects) {\n      setProjects(data.projects)\n    }\n  }, [data, fetching])\n  return (\n    <Flex\n      flexDirection='column'\n      bg={useColorModeValue(\"#F9FAFB\", \"gray.600\")}\n      p={5}\n      w=\"auto\"\n      justifyContent=\"center\"\n      alignItems=\"center\"\n    >\n      {projects.map(project => <OfficialProject\n            id={project.id}\n            key={project.id}\n            company={project.company}\n            description={project.description}\n            duration={project.duration}\n            role={project.role} />)}\n    </Flex>\n  );\n}\n\nexport default ProjectListWrapper;\n","import React from \"react\";\nimport {\n  chakra,\n  Box,\n  Image,\n  Flex,\n  useColorModeValue,\n  Link\n} from \"@chakra-ui/react\";\nimport { ExternalLinkIcon } from \"@chakra-ui/icons\";\nexport interface UdacityProjectInfo {\n  id: string;\n  projectType: string;\n  curriculum: string;\n  learning: string;\n  projectTitle: string\n  projectUrl: string\n}\nexport default function UdacityProject(props: UdacityProjectInfo) {\n  const textColor = useColorModeValue(\"gray.600\", \"gray.300\");\n  return (\n    <Flex\n      bg={useColorModeValue(\"#F9FAFB\", \"gray.600\")}\n      p={5}\n      w=\"full\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n    >\n      <Box\n        mx=\"auto\"\n        px={8}\n        py={4}\n        rounded=\"lg\"\n        shadow=\"lg\"\n        bg={useColorModeValue(\"white\", \"gray.800\")}\n        maxW=\"2xl\"\n      >\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\n          <chakra.span\n            fontSize=\"sm\"\n            color={useColorModeValue(\"gray.600\", \"gray.400\")}\n          >\n            {props.projectType === 'PM' ? 'Product Management' : 'Cloud Developer'}\n          </chakra.span>\n        </Flex>\n\n        <Box mt={2}>\n          <chakra.h2\n            fontSize=\"2xl\"\n            color={useColorModeValue(\"gray.700\", \"white\")}\n            fontWeight=\"700\"\n          >\n            {props.curriculum}\n          </chakra.h2>\n          <chakra.h2\n            fontSize=\"xl\"\n            color={useColorModeValue(\"gray.700\", \"white\")}\n            fontWeight=\"700\"\n          >\n            {props.learning}\n          </chakra.h2>\n\n          <Link \n          fontSize=\"xl\"\n          fontWeight=\"600\" href={props.projectUrl ? props.projectUrl : ''} isExternal mt={2} color={textColor}>\n            {props.projectTitle} <ExternalLinkIcon />\n          </Link>\n        </Box>\n      </Box>\n    </Flex>\n  );\n}\n","import { Flex, useColorModeValue } from '@chakra-ui/react';\nimport UdacityProject, { UdacityProjectInfo } from 'components/UdacityProject/UdacityProject';\nimport React from 'react';\nimport { useQuery } from 'urql';\n\n\nconst UdacityProjectWrapper = () => {\n  const ProjectQuery = `\n  query ProjectQuery {\n    udacityProjects(orderBy: sequence_ASC) {\n      curriculum\n      learning\n      id\n      projectTitle\n      projectType\n      projectUrl\n    }\n  }\n  `;\n  const [result] = useQuery({\n    query: ProjectQuery,\n  });\n\n  const { data, fetching } = result;\n  const [projects, setProjects] = React.useState<UdacityProjectInfo[]>([])\n  React.useEffect(() => {\n    if (!fetching && data && data.udacityProjects) {\n      setProjects(data.udacityProjects)\n    }\n  }, [data, fetching])\n  return (\n    <Flex\n      flexDirection='column'\n      bg={useColorModeValue(\"#F9FAFB\", \"gray.600\")}\n      p={5}\n      w=\"auto\"\n      justifyContent=\"center\"\n      alignItems=\"center\"\n    >\n      {projects.map(project => <UdacityProject\n        id={project.id}\n        key={project.id}\n        curriculum={project.curriculum}\n        learning={project.learning}\n        projectTitle={project.projectTitle}\n        projectType={project.projectType}\n        projectUrl={project.projectUrl}\n      />)}\n    </Flex>\n  );\n}\n\nexport default UdacityProjectWrapper;\n","import {\n    Box,\n    BoxProps,\n    chakra,\n    Drawer,\n    DrawerContent,\n    DrawerOverlay,\n    Flex,\n    Icon,\n    IconButton,\n    Link,\n    Text,\n    useColorMode,\n    useColorModeValue,\n    useDisclosure,\n} from \"@chakra-ui/react\";\nimport { FaMandalorian, FaMoon, FaSun } from \"react-icons/fa\";\nimport { FiMenu } from \"react-icons/fi\";\nimport { HiCollection } from \"react-icons/hi\";\nimport { MdHome } from \"react-icons/md\";\nimport React from \"react\";\nimport { IconType } from \"react-icons\";\nimport Intro from \"../Intro/Intro\";\nimport { useQuery } from \"urql\";\nimport { ExternalLinkIcon } from \"@chakra-ui/icons\";\nimport UserCard from \"components/UserCard/UserCard.lazy\";\nimport ProjectListWrapper from \"components/ProjectListWrapper/ProjectListWrapper\";\nimport UdacityProjectWrapper from \"components/UdacityProjectWrapper/UdacityProjectWrapper\";\n\nenum SIDEBAR_ITEMS {\n    Home = 1,\n    AboutMe,\n    Resume,\n    OfficialProjects,\n    PM,\n    PersonalProjects\n}\n\ninterface NavItemProps extends BoxProps {\n    icon?: IconType;\n    children: React.ReactNode;\n    selected?: boolean\n};\n\ninterface SidebarProps extends BoxProps {\n    setSelectedNav: React.Dispatch<React.SetStateAction<number>>;\n    SelectedNav: number;\n    isOpen: boolean;\n    onOpen: () => void;\n    onClose: () => void;\n    onToggle: () => void;\n    isControlled: boolean;\n    getButtonProps: (props?: any) => any;\n    getDisclosureProps: (props?: any) => any;\n    file: string;\n}\nconst NavItem = (props: NavItemProps) => {\n    const { icon, children, ...rest } = props;\n    const colorSelected = useColorModeValue(\"gray.100\", \"gray.900\");\n    const colorNormal = useColorModeValue(\"white\", \"gray.800\");\n    return (\n        <Flex\n            align=\"center\"\n            px=\"4\"\n            pl=\"4\"\n            py=\"3\"\n            cursor=\"pointer\"\n            bg={props.selected ? colorSelected : colorNormal}\n            color={useColorModeValue(\"inherit\", \"gray.400\")}\n            _hover={{\n                bg: useColorModeValue(\"gray.100\", \"gray.900\"),\n                color: useColorModeValue(\"gray.900\", \"gray.200\"),\n            }}\n            role=\"group\"\n            fontWeight=\"semibold\"\n            transition=\".15s ease\"\n            {...rest}\n        >\n            \n            {children}\n        </Flex>\n    );\n};\n\nconst SidebarContent = (props: SidebarProps) => (\n    <Box\n        as=\"nav\"\n        pos=\"fixed\"\n        top=\"0\"\n        left=\"0\"\n        zIndex=\"sticky\"\n        h=\"full\"\n        pb=\"10\"\n        overflowX=\"hidden\"\n        overflowY=\"auto\"\n        bg={useColorModeValue(\"white\", \"gray.800\")}\n        borderColor={useColorModeValue(\"inherit\", \"gray.700\")}\n        borderRightWidth=\"1px\"\n        w=\"60\"\n        {...props}\n    >\n        <Flex\n            direction=\"column\"\n            as=\"nav\"\n            fontSize=\"sm\"\n            color=\"gray.600\"\n            aria-label=\"Main Navigation\"\n        >\n            <NavItem selected={isSelected(SIDEBAR_ITEMS.Home, props.SelectedNav)} onClick={() => props.setSelectedNav(SIDEBAR_ITEMS.Home)} icon={MdHome}>Home</NavItem>\n            <NavItem selected={isSelected(SIDEBAR_ITEMS.AboutMe, props.SelectedNav)} onClick={() => props.setSelectedNav(SIDEBAR_ITEMS.AboutMe)} icon={HiCollection}>About Me</NavItem>\n            <NavItem icon={HiCollection}>\n            <Link href={props.file} isExternal>\n            Résumé <ExternalLinkIcon mx=\"2px\" />\n            </Link>\n            </NavItem>\n            <NavItem selected={isSelected(SIDEBAR_ITEMS.OfficialProjects, props.SelectedNav)} onClick={() => props.setSelectedNav(SIDEBAR_ITEMS.OfficialProjects)} icon={HiCollection}>Official Projects</NavItem>\n            <NavItem selected={isSelected(SIDEBAR_ITEMS.PM, props.SelectedNav)} onClick={() => props.setSelectedNav(SIDEBAR_ITEMS.PM)} icon={FaMandalorian}>Product management projects (Udacity)</NavItem>\n            <NavItem selected={isSelected(SIDEBAR_ITEMS.PersonalProjects, props.SelectedNav)} onClick={() => props.setSelectedNav(SIDEBAR_ITEMS.PersonalProjects)} icon={HiCollection}>Software Projects</NavItem>\n        </Flex>\n    </Box>\n);\n\n\nconst Sidebar = () => {\n    const sidebar = useDisclosure();\n    const integrations = useDisclosure();\n    const { colorMode, toggleColorMode } = useColorMode();\n    const [SelectedNav, setSelectedNav] = React.useState(1)\n    const [file, setFile] = React.useState('');\n    const PdfQuery = `\n    query {\n        asset(where: {id: \"cksd16wa0lb2y0b57q8q3qdxe\"}) {\n        url\n        }\n    }\n    `;\n    const [result] = useQuery({\n    query: PdfQuery,\n    });\n\n    const { data, fetching } = result;\n\n    React.useEffect(() => {\n        if (!fetching && data && data.asset && data.asset.url) {\n            setFile(data.asset.url)\n        }\n    }, [data, fetching])\n    return (\n        <Box\n            as=\"section\"\n            bg={useColorModeValue(\"gray.50\", \"gray.700\")}\n            minH=\"100vh\"\n        >\n            <SidebarContent file={file} SelectedNav={SelectedNav} setSelectedNav={setSelectedNav} {...integrations} display={{ base: \"none\", md: \"unset\" }} />\n            <Drawer\n                isOpen={sidebar.isOpen}\n                onClose={sidebar.onClose}\n                placement=\"left\"\n            >\n                <DrawerOverlay />\n                <DrawerContent>\n                    <SidebarContent file={file} SelectedNav={SelectedNav} setSelectedNav={setSelectedNav} {...integrations} w=\"full\" borderRight=\"none\" />\n                </DrawerContent>\n            </Drawer>\n            <Box ml={{ base: 0, md: 60 }} transition=\".3s ease\">\n                <Flex\n                    as=\"header\"\n                    align=\"center\"\n                    justify=\"space-between\"\n                    w=\"full\"\n                    px=\"4\"\n                    bg={useColorModeValue(\"white\", \"gray.800\")}\n                    borderBottomWidth=\"1px\"\n                    borderColor={useColorModeValue(\"inherit\", \"gray.700\")}\n                    h=\"14\"\n                >\n                    <IconButton\n                        aria-label=\"Menu\"\n                        display={{ base: \"inline-flex\", md: \"none\" }}\n                        onClick={sidebar.onOpen}\n                        icon={<FiMenu />}\n                        size=\"sm\"\n                    />\n\n                    <Flex align=\"center\">\n                        {colorMode === 'dark' && <Icon onClick={toggleColorMode} color=\"gray.500\" as={FaSun} cursor=\"pointer\" />}\n                        {colorMode === 'light' && <Icon onClick={toggleColorMode} color=\"gray.500\" as={FaMoon} cursor=\"pointer\" />}\n                        <Text\n                            fontSize=\"medium\"\n                            ml=\"2\"\n                            color={useColorModeValue(\"brand.500\", \"white\")}\n                            fontWeight=\"semibold\"\n                        >\n                            My Portfolio\n                        </Text>\n                    </Flex>\n                </Flex>\n\n                <Box as=\"main\">\n                    {SelectedNav === SIDEBAR_ITEMS.Home &&\n                        <UserCard />\n                    }\n                    {SelectedNav === SIDEBAR_ITEMS.AboutMe &&\n                        <Intro />\n                    }\n                    {SelectedNav === SIDEBAR_ITEMS.OfficialProjects &&\n                        <ProjectListWrapper />\n                    }\n                    {SelectedNav === SIDEBAR_ITEMS.PM &&\n                        <UdacityProjectWrapper />\n                    }\n                    {SelectedNav === SIDEBAR_ITEMS.PersonalProjects &&\n                        <chakra.h1>WIP</chakra.h1>\n                    }\n                    {/* <Box borderWidth=\"4px\" borderStyle=\"dashed\" rounded=\"md\" h=\"96\" /> */}\n                </Box>\n            </Box>\n        </Box>\n    );\n}\n\nfunction isSelected(currentIndex: number, selectedIndex: number): boolean {\n    return currentIndex === selectedIndex;\n}\n\nexport default Sidebar\n","import {\n  ChakraProvider,\n  extendTheme,\n  ThemeConfig\n} from \"@chakra-ui/react\"\nimport Sidebar from \"./components/sidebar/SideBar\";\nimport { createClient, Provider } from \"urql\";\nimport * as React from \"react\"\n\nconst colors = {\n  brand: {\n    50: \"#ecefff\",\n    100: \"#cbceeb\",\n    200: \"#a9aed6\",\n    300: \"#888ec5\",\n    400: \"#666db3\",\n    500: \"#4d5499\",\n    600: \"#3c4178\",\n    700: \"#2a2f57\",\n    800: \"#181c37\",\n    900: \"#080819\"\n  }\n};\n\nconst config : ThemeConfig = {\n  initialColorMode: \"dark\",\n  useSystemColorMode: false,\n}\nconst client = createClient({\n  url: process.env.REACT_APP_BASE_URL ? process.env.REACT_APP_BASE_URL : '',\n  fetchOptions: () => {\n    const token = process.env.REACT_APP_TOKEN\n    return {\n      headers: { authorization: token ? `Bearer ${token}` : '' },\n    };\n  },\n});\n\nconst theme = extendTheme({ colors, config });\nexport const App = () => (\n  <Provider value={client}>\n    <ChakraProvider theme={theme}>\n      <Sidebar />\n    </ChakraProvider>\n  </Provider>\n)\n","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { ColorModeScript } from \"@chakra-ui/react\"\nimport * as React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { App } from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}