{"version":3,"sources":["SideBar.tsx","App.tsx","reportWebVitals.ts","serviceWorker.ts","index.tsx"],"names":["NavItem","props","icon","children","rest","align","px","pl","py","cursor","color","useColorModeValue","_hover","bg","role","fontWeight","transition","SidebarContent","as","pos","top","left","zIndex","h","pb","overflowX","overflowY","borderColor","borderRightWidth","w","fontSize","ml","direction","aria-label","MdHome","HiCollection","FaMandalorian","Sidebar","sidebar","useDisclosure","integrations","toggleColorMode","useColorMode","minH","display","base","md","isOpen","onClose","placement","borderRight","justify","borderBottomWidth","onClick","onOpen","size","FaSun","p","borderWidth","borderStyle","rounded","theme","extendTheme","colors","brand","50","100","200","300","400","500","600","700","800","900","config","initialColorMode","useSystemColorMode","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f6491e07.chunk.js","sourcesContent":["import {\r\n    Box,\r\n    BoxProps,\r\n    Collapse,\r\n    Drawer,\r\n    DrawerContent,\r\n    DrawerOverlay,\r\n    Flex,\r\n    FlexboxProps,\r\n    Icon,\r\n    IconButton,\r\n    Input,\r\n    InputGroup,\r\n    InputLeftElement,\r\n    Text,\r\n    useColorMode,\r\n    useColorModeValue,\r\n    useDisclosure,\r\n} from \"@chakra-ui/react\";\r\nimport { FaBell, FaClipboardCheck, FaMandalorian, FaRss, FaSun } from \"react-icons/fa\";\r\nimport { AiFillGift } from \"react-icons/ai\";\r\nimport { BsGearFill } from \"react-icons/bs\";\r\nimport { FiMenu, FiSearch } from \"react-icons/fi\";\r\nimport { HiCode, HiCollection } from \"react-icons/hi\";\r\nimport { MdHome, MdKeyboardArrowRight } from \"react-icons/md\";\r\nimport React from \"react\";\r\nimport { IconType } from \"react-icons\";\r\n\r\ninterface NavItemProps extends BoxProps {\r\n    icon?: IconType;\r\n    children: React.ReactNode;\r\n};\r\n\r\ninterface SidebarProps extends BoxProps {\r\n    isOpen: boolean;\r\n    onOpen: () => void;\r\n    onClose: () => void;\r\n    onToggle: () => void;\r\n    isControlled: boolean;\r\n    getButtonProps: (props?: any) => any;\r\n    getDisclosureProps: (props?: any) => any;\r\n}\r\nconst NavItem = (props: NavItemProps) => {\r\n    const { icon, children, ...rest } = props;\r\n    return (\r\n        <Flex\r\n            align=\"center\"\r\n            px=\"4\"\r\n            pl=\"4\"\r\n            py=\"3\"\r\n            cursor=\"pointer\"\r\n            color={useColorModeValue(\"inherit\", \"gray.400\")}\r\n            _hover={{\r\n                bg: useColorModeValue(\"gray.100\", \"gray.900\"),\r\n                color: useColorModeValue(\"gray.900\", \"gray.200\"),\r\n            }}\r\n            role=\"group\"\r\n            fontWeight=\"semibold\"\r\n            transition=\".15s ease\"\r\n            {...rest}\r\n        >\r\n            \r\n            {children}\r\n        </Flex>\r\n    );\r\n};\r\n\r\nconst SidebarContent = (props: SidebarProps) => (\r\n    <Box\r\n        as=\"nav\"\r\n        pos=\"fixed\"\r\n        top=\"0\"\r\n        left=\"0\"\r\n        zIndex=\"sticky\"\r\n        h=\"full\"\r\n        pb=\"10\"\r\n        overflowX=\"hidden\"\r\n        overflowY=\"auto\"\r\n        bg={useColorModeValue(\"white\", \"gray.800\")}\r\n        borderColor={useColorModeValue(\"inherit\", \"gray.700\")}\r\n        borderRightWidth=\"1px\"\r\n        w=\"60\"\r\n        {...props}\r\n    >\r\n        <Flex px=\"4\" py=\"5\" align=\"center\">\r\n            <Text\r\n                fontSize=\"2xl\"\r\n                ml=\"2\"\r\n                color={useColorModeValue(\"brand.500\", \"white\")}\r\n                fontWeight=\"semibold\"\r\n            >\r\n                Portfolio\r\n            </Text>\r\n        </Flex>\r\n        <Flex\r\n            direction=\"column\"\r\n            as=\"nav\"\r\n            fontSize=\"sm\"\r\n            color=\"gray.600\"\r\n            aria-label=\"Main Navigation\"\r\n        >\r\n            <NavItem icon={MdHome}>Personal Information</NavItem>\r\n            <NavItem icon={HiCollection}>Key Skills</NavItem>\r\n            <NavItem icon={FaMandalorian}>Product management projects (Udacity)</NavItem>\r\n            <NavItem icon={HiCollection}>Software Projects</NavItem>\r\n        </Flex>\r\n    </Box>\r\n);\r\n\r\n\r\nconst Sidebar = () => {\r\n    const sidebar = useDisclosure();\r\n    const integrations = useDisclosure();\r\n    const { toggleColorMode } = useColorMode();\r\n    return (\r\n        <Box\r\n            as=\"section\"\r\n            bg={useColorModeValue(\"gray.50\", \"gray.700\")}\r\n            minH=\"100vh\"\r\n        >\r\n            <SidebarContent {...integrations} display={{ base: \"none\", md: \"unset\" }} />\r\n            <Drawer\r\n                isOpen={sidebar.isOpen}\r\n                onClose={sidebar.onClose}\r\n                placement=\"left\"\r\n            >\r\n                <DrawerOverlay />\r\n                <DrawerContent>\r\n                    <SidebarContent {...integrations} w=\"full\" borderRight=\"none\" />\r\n                </DrawerContent>\r\n            </Drawer>\r\n            <Box ml={{ base: 0, md: 60 }} transition=\".3s ease\">\r\n                <Flex\r\n                    as=\"header\"\r\n                    align=\"center\"\r\n                    justify=\"space-between\"\r\n                    w=\"full\"\r\n                    px=\"4\"\r\n                    bg={useColorModeValue(\"white\", \"gray.800\")}\r\n                    borderBottomWidth=\"1px\"\r\n                    borderColor={useColorModeValue(\"inherit\", \"gray.700\")}\r\n                    h=\"14\"\r\n                >\r\n                    <IconButton\r\n                        aria-label=\"Menu\"\r\n                        display={{ base: \"inline-flex\", md: \"none\" }}\r\n                        onClick={sidebar.onOpen}\r\n                        icon={<FiMenu />}\r\n                        size=\"sm\"\r\n                    />\r\n\r\n                    <Flex align=\"center\">\r\n                        <Icon onClick={toggleColorMode} color=\"gray.500\" as={FaSun} cursor=\"pointer\" />\r\n                        <Text\r\n                            fontSize=\"medium\"\r\n                            ml=\"2\"\r\n                            color={useColorModeValue(\"brand.500\", \"white\")}\r\n                            fontWeight=\"semibold\"\r\n                        >\r\n                            Parimal Naigaonkar\r\n                        </Text>\r\n                    </Flex>\r\n                </Flex>\r\n\r\n                <Box as=\"main\" p=\"4\">\r\n                    {/* Add content here, remove div below  */}\r\n                    <Box borderWidth=\"4px\" borderStyle=\"dashed\" rounded=\"md\" h=\"96\" />\r\n                </Box>\r\n            </Box>\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default Sidebar\r\n","import * as React from \"react\"\nimport {\n  ChakraProvider,\n  Box,\n  Text,\n  Link,\n  VStack,\n  Code,\n  Grid,\n  extendTheme,\n  ThemeConfig\n} from \"@chakra-ui/react\"\nimport { ColorModeSwitcher } from \"./ColorModeSwitcher\"\nimport Sidebar from \"./SideBar\";\n\n\nconst colors = {\n  brand: {\n    50: \"#ecefff\",\n    100: \"#cbceeb\",\n    200: \"#a9aed6\",\n    300: \"#888ec5\",\n    400: \"#666db3\",\n    500: \"#4d5499\",\n    600: \"#3c4178\",\n    700: \"#2a2f57\",\n    800: \"#181c37\",\n    900: \"#080819\"\n  }\n};\n\nconst config : ThemeConfig = {\n  initialColorMode: \"light\",\n  useSystemColorMode: false,\n}\nconst theme = extendTheme({ colors, config });\nexport const App = () => (\n  <ChakraProvider theme={theme}>\n    <Sidebar />\n  </ChakraProvider>\n)\n","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { ColorModeScript } from \"@chakra-ui/react\"\nimport * as React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { App } from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}